version: '3.8'

services:
  # MongoDB
  mongodb:
    image: mongo:7
    container_name: royal-media-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: royal_media
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - royal-media
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis
  redis:
    image: redis:7-alpine
    container_name: royal-media-redis
    command: redis-server --requirepass password123 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - royal-media
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO (S3 compatible storage)
  minio:
    image: minio/minio:latest
    container_name: royal-media-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - royal-media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Create MinIO buckets
  minio-setup:
    image: minio/mc:latest
    container_name: royal-media-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/royal-media-uploads --ignore-existing;
      /usr/bin/mc mb myminio/royal-media-avatars --ignore-existing;
      /usr/bin/mc mb myminio/royal-media-covers --ignore-existing;
      /usr/bin/mc mb myminio/royal-media-posts --ignore-existing;
      /usr/bin/mc policy set public myminio/royal-media-uploads;
      /usr/bin/mc policy set public myminio/royal-media-avatars;
      /usr/bin/mc policy set public myminio/royal-media-covers;
      /usr/bin/mc policy set public myminio/royal-media-posts;
      echo 'MinIO buckets created successfully';
      exit 0;
      "
    networks:
      - royal-media

  # BullMQ Dashboard (Redis-based job queue)
  bullmq-board:
    image: deadly0/bull-board:latest
    container_name: royal-media-bullmq-board
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: password123
    ports:
      - "3001:3000"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - royal-media

  # Prometheus (Metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: royal-media-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - royal-media
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: royal-media-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - royal-media
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx (Development Gateway)
  nginx:
    image: nginx:alpine
    container_name: royal-media-nginx
    ports:
      - "8000:80"
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mongodb
      - redis
      - minio
    networks:
      - royal-media
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mailhog (Email testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: royal-media-mailhog
    ports:
      - "1025:1025" # SMTP
      - "8025:8025" # Web UI
    networks:
      - royal-media

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  royal-media:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16