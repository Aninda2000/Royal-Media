name: Royal Media CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  MONGODB_URI: mongodb://localhost:27017/royal_media_test
  REDIS_URL: redis://localhost:6379
  JWT_SECRET: test-jwt-secret-for-ci
  JWT_EXPIRES_IN: 7d

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: royal_media_test
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install auth service dependencies
      run: |
        cd apps/auth
        npm ci

    - name: Install posts service dependencies
      run: |
        cd apps/posts
        npm ci

    - name: Install web app dependencies
      run: |
        cd apps/web
        npm ci

    - name: Run linting
      run: |
        cd apps/auth && npm run lint
        cd ../posts && npm run lint
        cd ../web && npm run lint

    - name: Run type checking
      run: |
        cd apps/auth && npm run type-check
        cd ../posts && npm run type-check
        cd ../web && npm run type-check

    - name: Build services
      run: |
        cd apps/auth && npm run build
        cd ../posts && npm run build

    - name: Build web app
      run: |
        cd apps/web && npm run build

    - name: Run auth service tests
      run: |
        cd apps/auth
        npm test

    - name: Run posts service tests
      run: |
        cd apps/posts
        npm test

    - name: Run web app tests
      run: |
        cd apps/web
        npm test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push auth service
      uses: docker/build-push-action@v5
      with:
        context: ./apps/auth
        file: ./apps/auth/Dockerfile
        push: true
        tags: |
          royalmedia/auth-service:latest
          royalmedia/auth-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push posts service
      uses: docker/build-push-action@v5
      with:
        context: ./apps/posts
        file: ./apps/posts/Dockerfile
        push: true
        tags: |
          royalmedia/posts-service:latest
          royalmedia/posts-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push web app
      uses: docker/build-push-action@v5
      with:
        context: ./apps/web
        file: ./apps/web/Dockerfile
        push: true
        tags: |
          royalmedia/web-app:latest
          royalmedia/web-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment script here
        # For example, using AWS ECS, Kubernetes, or Docker Swarm
        
    - name: Run health checks
      run: |
        echo "Running health checks..."
        # Add health check commands here
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: 'Royal Media deployment completed!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}